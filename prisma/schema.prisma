datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  comments      Comment[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier  String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  userId      String

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  videoId   String
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  videoId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}
